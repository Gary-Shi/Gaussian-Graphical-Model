addpath ./Bglasso_Block/
addpath ./Bglasso_Chol/
addpath ./Fglasso/


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%  Models     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%% AR(1) case
p = 30; n = 50;
SigTrue = toeplitz(0.7.^[0:p-1]);
CTrue = inv(SigTrue);
Y = rMNorm(zeros(p,1),SigTrue,n);
S = Y*Y';





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%  Five methods     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

burnin  = 1000; nmc = 2000;

%%%%% (1) Bayesian Graphical Lasso (Friedman et al 2009 Biostatistics)
a_lambda = 1; b_lambda = 0.1; % Prior hyperparameters
Sig = S/n; C = inv(Sig); % Initial values 
[Sig_save,C_save,lambda_save] = BayesGLasso_Columnwise(S,n,Sig,C,a_lambda,b_lambda,burnin,nmc);


%%%  Run the slower Cholesky-based Gibbs sampler to verify the correctness of the block
%%%  and Cholesky-based Gibbs samplers by inspecting the agreement of the posterior summaries of
%%%  parameters from these two different samplers ...
%  [T_save,d_save,C_save_chol,Sig_save_chol,lambda_save_chol] = Bglasso_mcmc_chol_lambdaunknown(S,n,a_lambda,b_lambda,C,burnin,nmc);


%%  Stein's loss and its Bayes estimates
Sig_L1_bglasso = inv(mean(C_save,3));
L1_bglasso    = trace(Sig_L1_bglasso/SigTrue) - log(det(Sig_L1_bglasso/SigTrue)) - p;



%%%%% (2) Bayesian Adaptive Graphical Lasso (i.e., generalized Double
%%%%% Pareto with fixed hyperparameter)
Sig = S/n; C = inv(Sig); % Initial values 
[Sig_save,C_save] = BayesGLassoGDP(S,n,Sig,C,burnin,nmc);
Sig_L1_bgdp = inv(mean(C_save,3));
L1_bgdp = trace(Sig_L1_bgdp/SigTrue) - log(det(Sig_L1_bgdp/SigTrue)) - p;


%%%% (3) Frequentisit Glasso+CV (Friedman et al 2009 Biostatistics)
  rho_mean = mean(lambda_save)/n*2;
  d = rho_mean/5;
  rhopath = [rho_mean/5:d:rho_mean*3]; fold  = 5;
  [W_lasso,M_lasso,rhomax_lasso] = glasso_cv(Y,rhopath,fold);


  % Change grids if rhomax is on the boundary of the previous "rhopath".
      if rhomax_lasso == rhopath(end)    
          while rhomax_lasso == rhopath(end)
          rhopath = [rhopath(end):d:rhopath(end)+3*rho_mean];
          [W_lasso,M_lasso,rhomax_lasso] = glasso_cv(Y,rhopath,fold);
          end
          
      elseif rhomax_lasso == rhopath(1)
         
          while rhomax_lasso == rhopath(1)          
          d1 = rhopath(1)/8;
          rhopath = [rhopath(1)/2:d1:rhopath(1)];
          [W_lasso,M_lasso,rhomax_lasso] = glasso_cv(Y,rhopath,fold);          
          end
      end
      

  
L1_glasso = trace(W_lasso/SigTrue) - log(det(W_lasso/SigTrue)) - p;



  
%%%% (4) Frequentisit AdapGlasso+CV  (Fan Feng Wu 2009 AoAs)
rho_mean = mean(lambda_save)/n*2;
  d = rho_mean/5;
  rhopath = [rho_mean/5:d:rho_mean*3]; fold  = 10;
  [W_adapt,M_adapt,M0,rhomax_adapt] = glasso_adaptive_cv(Y,rhopath,fold);
  
          if rhomax_adapt == rhopath(end)
          while rhomax_adapt == rhopath(end)
          rhopath = [rhopath(end):d:rhopath(end)+3*rho_mean];
          [W_adapt,M_adapt,M0,rhomax_adapt] = glasso_adaptive_cv(Y,rhopath,fold);
          end
          
      elseif rhomax_adapt == rhopath(1)
         
          while rhomax_adapt == rhopath(1)          
          d1 = rhopath(1)/8;
          rhopath = [rhopath(1)/2:d1:rhopath(1)];
          [W_adapt,M_adapt,M0,rhomax_adapt] = glasso_adaptive_cv(Y,rhopath,fold);          
          end
          end
        
          
L1_adapt = trace(W_adapt/SigTrue) - log(det(W_adapt/SigTrue)) - p;

  
%%%% (5) Graphical SCAD+CV (Fan Feng Wu 2009 AoAs)   
  rhopath = [9*rho_mean:d:rho_mean*12]; 
  [W_scad,M_scad,M0,rhomax_scad] = glasso_SCAD_cv(Y,rhopath,fold); 
  
        if rhomax_scad == rhopath(end)
          while rhomax_scad == rhopath(end)
          rhopath = [rhopath(end):d:rhopath(end)+3*rho_mean];
          [W_scad,M_scad,M0,rhomax_scad] = glasso_SCAD_cv(Y,rhopath,fold);
          end          
      elseif rhomax_scad == rhopath(1)         
          while rhomax_scad == rhopath(1)          
          d1 = rhopath(1)/8;
          rhopath = [rhopath(1)/2:d1:rhopath(1)];
          [W_scad,M_scad,M0,rhomax_scad] = glasso_SCAD_cv(Y,rhopath,fold);          
          end
        end
      
        
        
        
L1_scad = trace(W_scad/SigTrue) - log(det(W_scad/SigTrue)) - p;
 
 
[L1_bglasso,L1_bgdp,L1_glasso,L1_adapt,L1_scad]


